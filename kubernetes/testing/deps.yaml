#
# RABBITMQ
#
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq-creds
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
type: Opaque
data:
  rabbitmq.pass: RVZCNklCQVhWMTlUWEtlQWZ4dWRUQkk0RVk3dzljaWk=
  rabbitmq.user: Y29sbGFib3JhdGU=
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang-cookie
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
data:
  kube.hostname.fix: 'true'
  kube.use-long-hostname: 'true'
  rabbitmq.log.level: info
  rabbitmq.use-longname: 'true'
---
kind: Service
apiVersion: v1
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
    - name: admin
      port: 15672
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq
        test: 'true'
        environment: testing
    spec:
      containers:
      - name: rabbitmq
        image: callforamerica/rabbitmq:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: KUBE_HOSTNAME_FIX
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: kube.hostname.fix
        - name: RABBITMQ_USE_LONGNAME
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: rabbitmq.use-longname
        - name: USE_LONG_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: kube.use-long-hostname
        - name: RABBITMQ_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: rabbitmq.log.level
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-creds
              key: rabbitmq.user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-creds
              key: rabbitmq.pass
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang-cookie
              key: erlang.cookie
        ports:
        - name: amqp
          containerPort: 5672
        - name: admin
          containerPort: 15672
        volumeMounts:
        - name: mnesia-ramfs
          mountPath: /var/lib/rabbitmq/mnesia
        readinessProbe:
          tcpSocket:
            port: 5672
          initialDelaySeconds: 10
          timeoutSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/bash", "-lc", "rabbitmqctl node_health_check | grep -q '^Health check passed'"]
          initialDelaySeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: mnesia-ramfs
        emptyDir:
          medium: Memory
      restartPolicy: Always

#
# COUCHDB
#
---
apiVersion: v1
kind: Secret
metadata:
  name: couchdb-creds
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  couchdb.pass: RVZCNklCQVhWMTlUWEtlQWZ4dWRUQkk0RVk3dzljaWk=
  couchdb.user: Y29sbGFib3JhdGU=
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang-cookie
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
data:
  kube.use-long-hostname: 'true'
  erlang.threads: '25'
  couchdb.log.level: info
  couchdb.require-valid-user: 'false'
  couchdb.shards: '4'
  couchdb.replicas: '3'
  couchdb.read-quorum: '1'
  couchdb.write-quorum: '2'
  couchdiscover.log.level: info
---
kind: Service
apiVersion: v1
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
spec:
  clusterIP: None
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-lb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  serviceName: couchdb
  replicas: 3
  template:
    metadata:
      labels:
        app: couchdb
        test: 'true'
        environment: testing
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: couchdb
        image: callforamerica/couchdb:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: USE_LONG_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: kube.use-long-hostname
        - name: COUCHDB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: couchdb-creds
              key: couchdb.user
        - name: COUCHDB_ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: couchdb-creds
              key: couchdb.pass
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang-cookie
              key: erlang.cookie
        - name: ERLANG_THREADS
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: erlang.threads
        - name: COUCHDB_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdb.log.level
        - name: COUCHDB_REQUIRE_VALID_USER
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdb.require-valid-user
        - name: COUCHDB_SHARDS
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdb.shards
        - name: COUCHDB_REPLICAS
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdb.replicas
        - name: COUCHDB_READ_QUORUM
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdb.read-quorum
        - name: COUCHDB_WRITE_QUORUM
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdb.write-quorum
        ports:
        - name: data
          containerPort: 5984
        - name: admin
          containerPort: 5986
        readinessProbe:
          httpGet:
            path: /
            port: 5984
          initialDelaySeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /
            port: 5984
          initialDelaySeconds: 15
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 5
      - name: couchdiscover
        image: callforamerica/couchdiscover:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdiscover.log.level
      restartPolicy: Always

#
# FREESWITCH
#
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang-cookie
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: freeswitch
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
data:
  kube.search-domains.add: 'true'
  freeswitch.log.level: info
  freeswitch.log.color: 'true'
  freeswitch.rtp.start-port: '16384'
  freeswitch.rtp.end-port: '32768'
  freeswitch.disable-nat-detection: 'false'
  freeswitch.skip-sounds: 'false'
  freeswitch.tls.enable: 'false'
---
apiVersion: v1
kind: Service
metadata:
  name: freeswitch
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
spec:
  clusterIP: None
  selector:
    app: freeswitch
  ports:
  - name: event-socket
    port: 8021
  - name: mod-kazoo
    port: 8031
  - name: sip
    port: 11000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: freeswitch
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: freeswitch
        test: 'true'
        environment: testing
    spec:
      hostNetwork: true
      containers:
      - name: freeswitch
        image: callforamerica/freeswitch:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
            - NET_ADMIN
            - NET_RAW
            - NET_BROADCAST
            - SYS_NICE
            - SYS_RESOURCE
        env:
        - name: KUBE_SEARCH_DOMAINS_ADD
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: kube.search-domains.add
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang-cookie
              key: erlang.cookie
        - name: FREESWITCH_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.log.level
        - name: FREESWITCH_LOG_COLOR
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.log.color
        - name: FREESWITCH_RTP_START_PORT
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.rtp.start-port
        - name: FREESWITCH_RTP_END_PORT
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.rtp.end-port
        - name: FREESWITCH_DISABLE_NAT_DETECTION
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.disable-nat-detection
        - name: FREESWITCH_TLS_ENABLE
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.tls.enable
        ports:
        - name: event-socket
          containerPort:  8021
        - name: mod-kazoo
          containerPort:  8031
        - name: sip
          protocol: UDP
          containerPort: 11000
        readinessProbe:
          exec:
            command: ["fs_cli", "-x", "status", "|", "grep", "-q", "^UP"]
          initialDelaySeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          exec:
            command: ["fs_cli", "-x", "status", "|", "grep", "-q", "^UP"]
          initialDelaySeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: freeswitch-ramfs
          mountPath: /volumes/freeswitch
      volumes:
      - name: freeswitch-ramfs
        emptyDir:
          medium: Memory
      restartPolicy: Always

#
# KAMAILIO
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kamailio
  labels:
    app: kamailio
    test: 'true'
    environment: testing
data:
  kube.search-domains.add: 'true'
  kamailio.log.level: info
  kamailio.log.color: 'true'
  kamailio.amqp.hosts: rabbitmq
  kamailio.shm-memory: '128'
  kamailio.pkg-memory: '8'
  kamailio.child-proc: '8'
  kamailio.enable-roles: websockets,message,presence_query,presence_sync,presence_notify_sync,registrar_sync
  sync.freeswitch.source: kubernetes
  sync.freeswitch.args: freeswitch
---
apiVersion: v1
kind: Service
metadata:
  name: kamailio
  labels:
    app: kamailio
    test: 'true'
    environment: testing
spec:
  clusterIP: None
  selector:
    app: kamailio
    test: 'true'
    environment: testing
  ports:
  - name: sip-tcp
    port: 5060
  - name: sip-udp
    protocol: UDP
    port: 5060
  - name: sip-tls
    port: 5061
  - name: ws-tcp
    port: 5064
  - name: ws-udp
    protocol: UDP
    port: 5064
  - name: wss-tcp
    port: 5065
  - name: wss-udp
    protocol: UDP
    port: 5065
  - name: alg-tcp
    port: 7000
  - name: alg-udp
    protocol: UDP
    port: 7000
  - name: alg-tls
    port: 7001
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kamailio
  labels:
    app: kamailio
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: kamailio
        test: 'true'
        environment: testing
      annotations:
        pod.beta.kubernetes.io/init-containers: |-
          [
              {
                  "name": "kubewait",
                  "image": "callforamerica/kubewait",
                  "imagePullPolicy": "IfNotPresent",
                  "args": ["rabbitmq", "freeswitch"],
                  "env": [
                      {
                          "name": "NAMESPACE",
                          "valueFrom": {
                              "fieldRef": {
                                  "apiVersion": "v1",
                                  "fieldPath": "metadata.namespace"
                              }
                          }
                      }
                  ]
              }
          ]
    spec:
      hostNetwork: true
      containers:
      - name: kamailio
        image: callforamerica/kamailio:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
            - NET_ADMIN
            - NET_RAW
            - NET_BROADCAST
            - SYS_NICE
            - SYS_RESOURCE
        env:
        - name: KUBE_SEARCH_DOMAINS_ADD
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kube.search-domains.add
        - name: KAMAILIO_AMQP_HOSTS
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.amqp.hosts
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-creds
              key: rabbitmq.user
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-creds
              key: rabbitmq.pass
        - name: KAMAILIO_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.log.level
        - name: KAMAILIO_LOG_COLOR
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.log.color
        - name: KAMAILIO_ENABLE_ROLES
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.enable-roles
        - name: SYNC_FREESWITCH_SOURCE
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: sync.freeswitch.source
        - name: SYNC_FREESWITCH_ARGS
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: sync.freeswitch.args
        - name: KAMAILIO_SHM_MEMORY
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.shm-memory
        - name: KAMAILIO_PKG_MEMORY
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.pkg-memory
        - name: KAMAILIO_CHILD_PROC
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.child-proc
        ports:
        - name: sip-tcp
          containerPort: 5060
        - name: sip-udp
          protocol: UDP
          containerPort: 5060
        - name: sip-tls
          containerPort: 5061
        - name: ws-tcp
          containerPort: 5064
        - name: ws-udp
          protocol: UDP
          containerPort: 5064
        - name: wss-tcp
          containerPort: 5065
        - name: wss-udp
          protocol: UDP
          containerPort: 5065
        - name: alg-tcp
          containerPort: 7000
        - name: alg-udp
          protocol: UDP
          containerPort: 7000
        - name: alg-tls
          containerPort: 7001
        readinessProbe:
          exec:
            command: ["kamctl", "monitor", "1", "|", "grep -q", "^Up"]
          initialDelaySeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          exec:
            command: ["kamctl", "monitor", "1", "|", "grep -q", "^Up"]
          initialDelaySeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: volumes-ram
          mountPath: /volumes/kamailio/dbtext
      volumes:
      - name: volumes-ram
        emptyDir:
          medium: Memory
      restartPolicy: Always

#
# KAZOO
#
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang-cookie
  labels:
    app: kazoo
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kazoo
  labels:
    app: kazoo
    test: 'true'
    environment: testing
data:
  kube.hostname.fix: 'true'
  datacenter: sl
  region: east
  erlang.threads: '64'
  couchdb.host: couchdb-lb
  kazoo.apps: blackhole,callflow,cdr,conference,crossbar,doodle,ecallmgr,hangups,hotornot,konami,jonny5,media_mgr,milliwatt,omnipresence,pivot,registrar,reorder,stepswitch,sysconf,teletype,trunkstore,webhooks
  kazoo.log.level: info
  kazoo.log.color: 'true'
  kazoo.amqp.hosts: rabbitmq
---
apiVersion: v1
kind: Service
metadata:
  name: kazoo
  labels:
    app: kazoo
    test: 'true'
    environment: testing
spec:
  type: NodePort
  selector:
    app: kazoo
  ports:
  - name: crossbar
    port: 8000
    nodePort: 30800
  - name: ws-tcp
    port: 5555
    nodePort: 30055
  - name: ws-udp
    protocol: UDP
    port: 5555
    nodePort: 30055
  - name: fax-smtp
    port: 19025
    nodePort: 30025
  - name: media-proxy
    port: 24517
    nodePort: 30017
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kazoo
  labels:
    app: kazoo
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: kazoo
        test: 'true'
        environment: testing
      annotations:
        pod.beta.kubernetes.io/init-containers: |-
          [
              {
                  "name": "kubewait",
                  "image": "callforamerica/kubewait",
                  "imagePullPolicy": "IfNotPresent",
                  "args": ["rabbitmq", "couchdb"],
                  "env": [
                      {
                          "name": "NAMESPACE",
                          "valueFrom": {
                              "fieldRef": {
                                  "apiVersion": "v1",
                                  "fieldPath": "metadata.namespace"
                              }
                          }
                      }
                  ]
              }
          ]
    spec:
      containers:
      - name: kazoo
        image: callforamerica/kazoo:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: KUBE_HOSTNAME_FIX
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kube.hostname.fix
        - name: ERLANG_THREADS
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: erlang.threads
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang-cookie
              key: erlang.cookie
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq-creds
              key: rabbitmq.user
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq-creds
              key: rabbitmq.pass
        - name: COUCHDB_HOST
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: couchdb.host
        - name: COUCHDB_USER
          valueFrom:
            secretKeyRef:
              name: couchdb-creds
              key: couchdb.user
        - name: COUCHDB_PASS
          valueFrom:
            secretKeyRef:
              name: couchdb-creds
              key: couchdb.pass
        - name: REGION
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: region
        - name: DATACENTER
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: datacenter
        - name: KAZOO_AMQP_HOSTS
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.amqp.hosts
        - name: KAZOO_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.log.level
        - name: KAZOO_LOG_COLOR
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.log.color
        - name: KAZOO_APPS
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.apps
        ports:
        - name: crossbar
          containerPort: 8000
        - name: ws-tcp
          containerPort: 5555
        - name: ws-udp
          protocol: UDP
          containerPort: 5555
        - name: fax-smtp
          containerPort: 19025
        - name: media-proxy
          containerPort: 24517
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 160
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 180
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
      restartPolicy: Always

