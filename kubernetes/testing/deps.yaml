#
# RABBITMQ
#
---
apiVersion: v1
kind: Secret
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
type: Opaque
data:
  rabbitmq.pass: RVZCNklCQVhWMTlUWEtlQWZ4dWRUQkk0RVk3dzljaWk=
  rabbitmq.user: Y29sbGFib3JhdGU=
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
data:
  erlang.hostname: long
  kube.hostname.fix: 'true'
  rabbitmq.log.level: info
---
kind: Service
apiVersion: v1
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
    - name: admin
      port: 15672
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq
        test: 'true'
        environment: testing
    spec:
      containers:
      - name: rabbitmq
        image: telephoneorg/rabbitmq:latest
        imagePullPolicy: Always
        env:
        - name: ERLANG_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: erlang.hostname
        - name: KUBE_HOSTNAME_FIX
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: kube.hostname.fix
        - name: RABBITMQ_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rabbitmq
              key: rabbitmq.log.level
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.user
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.pass
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang
              key: erlang.cookie
        ports:
        - name: amqp
          containerPort: 5672
        - name: admin
          containerPort: 15672
        volumeMounts:
        - name: mnesia-ramfs
          mountPath: /var/lib/rabbitmq/mnesia
        readinessProbe:
          tcpSocket:
            port: 5672
          initialDelaySeconds: 10
          timeoutSeconds: 10
        livenessProbe:
          exec:
            command: ["/bin/bash", "-lc", "rabbitmqctl node_health_check | grep -q '^Health check passed'"]
          initialDelaySeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: mnesia-ramfs
        emptyDir:
          medium: Memory
      restartPolicy: Always

#
# COUCHDB
#
---
apiVersion: v1
kind: Secret
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  couchdb.user: Y29sbGFib3JhdGU=
  couchdb.pass: RVZCNklCQVhWMTlUWEtlQWZ4dWRUQkk0RVk3dzljaWk=
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang
  labels:
    app: couchdb
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb-templates
  labels:
    app: couchdb
    test: 'true'
    environment: testing
data:
  local.ini.j2: |
    ---
    target: /config/local.ini
    ---
    {% set config_map = env.get('CONFIG_MAP', 'couchdb') %}
    {% set config = kube.get('configmap', config_map).data -%}

    [couchdb]
    database_dir = {{ config.get('couchdb.data-dir', '/volumes/couchdb/data') }}
    view_index_dir = {{ config.get('couchdb.data-dir', '/volumes/couchdb/data') }}

    [chttpd]
    require_valid_user = {{ config.get('couchdb.require-valid-user', 'true') }}
    port = {{ config.get('couchdb.port', '5984') }}
    bind_address = 0.0.0.0

    [httpd]
    require_valid_user = {{ config.get('couchdb.require-valid-user', 'true') }}
    port = {{ config.get('couchdb.port', '5986') }}
    bind_address = 0.0.0.0

    [cluster]
    q={{ config.get('couchdb.shards', '2') }}
    n={{ config.get('couchdb.replicas', '1') }}
    r={{ config.get('couchdb.read-quorum', '1') }}
    w={{ config.get('couchdb.write-quorum', '1') }}

    [couch_httpd_auth]
    iterations = 1000

    [log]
    level = {{ config.get('couchdb.log.level', 'info').lower() }}
  vm.args.j2: |
    ---
    target: /config/vm.args
    ---
    {% set config_map = env.get('CONFIG_MAP', 'couchdb') %}
    {% set config = kube.get('configmap', config_map).data -%}

    # Turn off the sasl error logger
    -sasl sasl_error_logger false

    # Use the following erlang hostname
    {% if config.get('erlang.hostname') == 'long' %}
    -name couchdb
    {% else %}
    -sname couchdb
    {% endif %}

    # Use kernel poll functionality if supported by emulator
    +K true

    # Start a pool of asynchronous IO threads
    +A {{ config.get('erlang.threads', '25') }}

    # Turn off the kernel error_logger
    -kernel error_logger silent

    # Set erlang distribution to use 11500-11999 ports instead of random
    # predictibility has value here
    -kernel inet_dist_listen_min 11500 inet_dist_listen_max 11999

    # Comment this line out if you want the Erlang shell
    +Bd -noinput
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
data:
  erlang.hostname: long
  erlang.threads: '25'
  couchdb.log.level: info
  couchdb.require-valid-user: 'false'
  couchdb.shards: '4'
  couchdb.replicas: '3'
  couchdb.read-quorum: '1'
  couchdb.write-quorum: '2'
  couchdiscover.log.level: info
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: couchdb-healthz
data:
  liveness.yaml: |
    http:
      http://localhost:5984/_up/:
        status: 200
        allow-insecure: false
        no-follow-redirects: false
        timeout: 5000
        body:
        - '{"status":"ok"}'
  readiness.yaml: |
    http:
      http://localhost:5984/_up/:
        status: 200
        allow-insecure: false
        no-follow-redirects: false
        timeout: 5000
        body:
        - '{"status":"ok"}'
---
kind: Service
apiVersion: v1
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
spec:
  clusterIP: None
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: v1
kind: Service
metadata:
  name: couchdb-lb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  selector:
    app: couchdb
  ports:
  - name: data
    port: 5984
  - name: admin
    port: 5986
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: couchdb
  labels:
    app: couchdb
    test: 'true'
    environment: testing
spec:
  serviceName: couchdb
  replicas: 2
  template:
    metadata:
      labels:
        app: couchdb
        test: 'true'
        environment: testing
    spec:
      terminationGracePeriodSeconds: 0
      initContainers:
      - name: config
        image: telephoneorg/tmpld
        args:
        - tmpld /templates/*.j2
        volumeMounts:
        - name: templates
          mountPath: /templates
        - name: config
          mountPath: /config
      containers:
      - name: couchdb
        image: telephoneorg/couchdb:latest
        env:
        - name: ERLANG_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: erlang.hostname
        - name: COUCHDB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: couchdb
              key: couchdb.user
        - name: COUCHDB_ADMIN_PASS
          valueFrom:
            secretKeyRef:
              name: couchdb
              key: couchdb.pass
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang
              key: erlang.cookie
        ports:
        - name: data
          containerPort: 5984
        - name: admin
          containerPort: 5986
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 5
      - name: healthz-ready
        image: telephoneorg/goss
        imagePullPolicy: IfNotPresent
        command:
        - healthz
        ports:
        - name: healthz-ready
          containerPort: 8080
        volumeMounts:
        - name: healthz
          mountPath: /goss
      - name: healthz-live
        image: telephoneorg/goss
        imagePullPolicy: IfNotPresent
        command:
        - healthz
        - liveness
        ports:
        - name: healthz-live
          containerPort: 8081
        volumeMounts:
        - name: healthz
          mountPath: /goss
      - name: couchdiscover
        image: telephoneorg/couchdiscover
        imagePullPolicy: IfNotPresent
        env:
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: couchdb
              key: couchdiscover.log.level
      volumes:
      - name: templates
        configMap:
          name: couchdb-templates
      - name: config
        emptyDir: {}
      - name: healthz
        configMap:
          name: couchdb-healthz
      restartPolicy: Always

#
# FREESWITCH
#
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: freeswitch
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
data:
  freeswitch.log.level: info
  freeswitch.log.color: 'true'
  freeswitch.rtp.port-range: '16384-32768'
  freeswitch.disable-nat-detection: 'false'
  freeswitch.tls.enable: 'false'
---
apiVersion: v1
kind: Service
metadata:
  name: freeswitch
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
spec:
  clusterIP: None
  selector:
    app: freeswitch
  ports:
  # - name: event-socket
  #   port: 8021
  - name: mod-kazoo
    port: 8031
  - name: sip
    port: 11000
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: freeswitch
  labels:
    app: freeswitch
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: freeswitch
        test: 'true'
        environment: testing
    spec:
      hostNetwork: true
      containers:
      - name: freeswitch
        image: telephoneorg/freeswitch
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
            - NET_ADMIN
            - NET_RAW
            - NET_BROADCAST
            - SYS_NICE
            - SYS_RESOURCE
        env:
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang
              key: erlang.cookie
        - name: FREESWITCH_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.log.level
        - name: FREESWITCH_LOG_COLOR
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.log.color
        - name: FREESWITCH_RTP_PORT_RANGE
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.rtp.port-range
        - name: FREESWITCH_DISABLE_NAT_DETECTION
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.disable-nat-detection
        - name: FREESWITCH_TLS_ENABLE
          valueFrom:
            configMapKeyRef:
              name: freeswitch
              key: freeswitch.tls.enable
        ports:
        # - name: event-socket
        #   containerPort:  8021
        - name: mod-kazoo
          containerPort:  8031
        - name: sip
          protocol: UDP
          containerPort: 11000
        readinessProbe:
          exec:
            command: ["fs_cli", "-x", "status", "|", "grep", "-q", "^UP"]
          initialDelaySeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          exec:
            command: ["fs_cli", "-x", "status", "|", "grep", "-q", "^UP"]
          initialDelaySeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: freeswitch-ramfs
          mountPath: /volumes/freeswitch
      volumes:
      - name: freeswitch-ramfs
        emptyDir:
          medium: Memory
      restartPolicy: Always
      dnsPolicy: ClusterFirstWithHostNet

#
# KAMAILIO
#
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kamailio
  labels:
    app: kamailio
    test: 'true'
    environment: testing
data:
  kamailio.log.level: info
  kamailio.log.color: 'true'
  rabbitmq.hosts: rabbitmq
  kamailio.shm-memory: '128'
  kamailio.pkg-memory: '8'
  kamailio.enable-roles: websockets,message,presence_query,presence_notify_sync,registrar_sync
  freeswitch.sync.source: kubernetes
  freeswitch.sync.args: freeswitch
---
apiVersion: v1
kind: Service
metadata:
  name: kamailio
  labels:
    app: kamailio
    test: 'true'
    environment: testing
spec:
  clusterIP: None
  selector:
    app: kamailio
    test: 'true'
    environment: testing
  ports:
  - name: sip-tcp
    port: 5060
  - name: sip-udp
    protocol: UDP
    port: 5060
  - name: sip-tls
    port: 5061
  - name: ws-tcp
    port: 5064
  - name: ws-udp
    protocol: UDP
    port: 5064
  - name: wss-tcp
    port: 5065
  - name: wss-udp
    protocol: UDP
    port: 5065
  - name: alg-tcp
    port: 7000
  - name: alg-udp
    protocol: UDP
    port: 7000
  - name: alg-tls
    port: 7001
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kamailio
  labels:
    app: kamailio
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: kamailio
        test: 'true'
        environment: testing
    spec:
      hostNetwork: true
      initContainers:
      - name: kubewait
        image: telephoneorg/kubewait
        imagePullPolicy: IfNotPresent
        args:
        - rabbitmq
        - freeswitch
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
      containers:
      - name: kamailio
        image: telephoneorg/kamailio:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          capabilities:
            add:
            - IPC_LOCK
            - NET_ADMIN
            - NET_RAW
            - NET_BROADCAST
            - SYS_NICE
            - SYS_RESOURCE
        env:
        - name: RABBITMQ_HOSTS
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: rabbitmq.hosts
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.user
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.pass
        - name: KAMAILIO_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.log.level
        - name: KAMAILIO_LOG_COLOR
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.log.color
        - name: KAMAILIO_ENABLE_ROLES
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.enable-roles
        - name: FREESWITCH_SYNC_SOURCE
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: freeswitch.sync.source
        - name: FREESWITCH_SYNC_ARGS
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: freeswitch.sync.args
        - name: KAMAILIO_SHM_MEMORY
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.shm-memory
        - name: KAMAILIO_PKG_MEMORY
          valueFrom:
            configMapKeyRef:
              name: kamailio
              key: kamailio.pkg-memory
        ports:
        - name: sip-tcp
          containerPort: 5060
        - name: sip-udp
          protocol: UDP
          containerPort: 5060
        - name: sip-tls
          containerPort: 5061
        - name: ws-tcp
          containerPort: 5064
        - name: ws-udp
          protocol: UDP
          containerPort: 5064
        - name: wss-tcp
          containerPort: 5065
        - name: wss-udp
          protocol: UDP
          containerPort: 5065
        - name: alg-tcp
          containerPort: 7000
        - name: alg-udp
          protocol: UDP
          containerPort: 7000
        - name: alg-tls
          containerPort: 7001
        readinessProbe:
          exec:
            command:
            - goss
            - -g
            - /goss/goss.yaml
            - validate
          initialDelaySeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          exec:
            command:
            - goss
            - -g
            - /goss/goss.yaml
            - validate
          initialDelaySeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 5
        volumeMounts:
        - name: db
          mountPath: /volumes/kamailio/db
      volumes:
      - name: db
        emptyDir:
          medium: Memory
      restartPolicy: Always
      dnsPolicy: ClusterFirstWithHostNet

#
# KAZOO
#
---
apiVersion: v1
kind: Secret
metadata:
  name: erlang
  labels:
    app: kazoo
    test: 'true'
    environment: testing
type: Opaque
data:
  erlang.cookie: WlgyZVA4Umo4cnVmUjVJbjNnWGV1akhYNllseEREbnRyd3ZROE5kcGd3OXFOQjZ5UFhPUWhxNFF4bEc0WnZaQQ==
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kazoo
  labels:
    app: kazoo
    test: 'true'
    environment: testing
data:
  erlang.hostname: long
  kube.hostname.fix: 'true'
  datacenter: sl
  region: east
  erlang.threads: '64'
  couchdb.host: couchdb-lb
  rabbitmq.hosts: rabbitmq
  kazoo.apps: blackhole,callflow,cdr,conference,crossbar,doodle,ecallmgr,hangups,hotornot,konami,jonny5,media_mgr,milliwatt,omnipresence,pivot,registrar,reorder,stepswitch,sysconf,teletype,trunkstore,webhooks
  kazoo.log.level: info
  kazoo.log.color: 'true'
---
apiVersion: v1
kind: Service
metadata:
  name: kazoo
  labels:
    app: kazoo
    test: 'true'
    environment: testing
spec:
  type: NodePort
  selector:
    app: kazoo
  ports:
  - name: crossbar
    port: 8000
    nodePort: 30800
  - name: ws-tcp
    port: 5555
    nodePort: 30055
  - name: ws-udp
    protocol: UDP
    port: 5555
    nodePort: 30055
  - name: fax-smtp
    port: 19025
    nodePort: 30025
  - name: media-proxy
    port: 24517
    nodePort: 30017
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kazoo
  labels:
    app: kazoo
    test: 'true'
    environment: testing
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: kazoo
        test: 'true'
        environment: testing
    spec:
      initContainers:
      - name: kubewait
        image: telephoneorg/kubewait
        imagePullPolicy: IfNotPresent
        args:
        - rabbitmq
        - couchdb
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
      containers:
      - name: kazoo
        image: telephoneorg/kazoo:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: ERLANG_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: erlang.hostname
        - name: KUBE_HOSTNAME_FIX
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kube.hostname.fix
        - name: ERLANG_THREADS
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: erlang.threads
        - name: ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: erlang
              key: erlang.cookie
        - name: RABBITMQ_USER
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.user
        - name: RABBITMQ_PASS
          valueFrom:
            secretKeyRef:
              name: rabbitmq
              key: rabbitmq.pass
        - name: COUCHDB_HOST
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: couchdb.host
        - name: COUCHDB_USER
          valueFrom:
            secretKeyRef:
              name: couchdb
              key: couchdb.user
        - name: COUCHDB_PASS
          valueFrom:
            secretKeyRef:
              name: couchdb
              key: couchdb.pass
        - name: REGION
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: region
        - name: DATACENTER
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: datacenter
        - name: RABBITMQ_HOSTS
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.amqp.hosts
        - name: KAZOO_LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.log.level
        - name: KAZOO_LOG_COLOR
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.log.color
        - name: KAZOO_APPS
          valueFrom:
            configMapKeyRef:
              name: kazoo
              key: kazoo.apps
        ports:
        - name: crossbar
          containerPort: 8000
        - name: ws-tcp
          containerPort: 5555
        - name: ws-udp
          protocol: UDP
          containerPort: 5555
        - name: fax-smtp
          containerPort: 19025
        - name: media-proxy
          containerPort: 24517
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 160
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 180
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
      restartPolicy: Always

